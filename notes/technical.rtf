{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red2\green2\blue2;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c784\c784\c784;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs48 \cf2 Goals\

\f1\b0 \'95\'a0Sharp boundary between the backend and UI(s). 
\f2\i This makes testing easier and should make it easier to add a web UI later.\

\f1\i0 \'95 Games should support replay and live rollback. 
\f2\i Much easier to repro bugs and to backup to investigate problems. Also would enable regression testing by replaying old games and verifying end states (or maybe that they don\'92t just panic or log errors).
\f1\i0 \
\'95\'a0UI should (eventually) be web-based. 
\f2\i Very low barrier to entry for users. Cross platform, should be able to have a nice looking yet powerful UI with some work (ideally with separate windows for stuff like inventory). Much easier to track both problems and usage (e.g. how well do the different classes do? how do player\'92s die? is an item or ability over-powered?)\

\f1\i0 \'95\'a0Make it as easy as possible for players to evaluate weapons and spells. 
\f2\i This isn\'92t entirely straight-forward because it depends on the target and the RNG will play a role but we could simulate the behavior against a target picked by the user for a lot of rounds and report the result.\

\f1\i0 \'95\'a0Events should not use floating point. 
\f2\i This side steps complexities involved in persistence as well as sticky isses like when are two floating point numbers equal. I think that this will mainly affect time which can be stored as integral milliseconds.\

\f1\i0 \'95\'a0Enable support for stuff like a terminal based debugger and potentially some sort of stats collector process.
\f2\i \
\

\f1\i0 I had experimented with something resembling a micro-services architecture using ipmpsc for IPC with state, logic, invariant, UI, debugger, etc services. Biggest problem with that is that the IPC introduces non-determinism. For example, the invariant service may complain but not for a replay because the timing may be slightly different. Micro-services also make debugging and profiling more complex and doesn\'92t seem to provide much value over the current coarse-grained approach.\
\

\f0\b Non-Goals\

\f1\b0 \'95\'a0Support for creating different UIs. 
\f2\i Doesn\'92t seem much reason to have this if there\'92s a good web front end (though might be nice to support different icon sets or themes). Also dicy to support different capabilities (e.g. terminal will have much inferior color support to compared to html).\

\f1\i0 \'95 A backend flexible enough to create a different game. 
\f2\i It should be easy to modify the game (so much of it may use config files) but it\'92s not an explicit goal to create a backend that can be used as the basis for other games. In theory the front end could be used for a lot of different sorts of games but even that isn\'92t an explicit goal.
\f1\i0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs58 \cf3 \expnd0\expndtw0\kerning0
Design
\f1\b0\fs48 \
Backend and UI(s) are separate processes using typed channels to communicate (ipmpsc crate). All the state and logic is maintained by the backend process. Backend mutate messages are logged to allow for replay and rollback.\
\
}